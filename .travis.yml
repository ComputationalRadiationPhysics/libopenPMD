sudo: required
dist: trusty

cache:
  apt: true
  directories:
    - $HOME/.cache/spack
    - $HOME/.cache/cmake-3.10.0
    - $HOME/Library/Caches/Homebrew
  pip: true

env:
  global:
    - BUILD: ~/buildTmp
    - CXXFLAGS: "-std=c++11 -Wall -Wextra -Woverloaded-virtual -Wshadow"
    - SPACK_ROOT: $HOME/.cache/spack
    - PATH: $PATH:$HOME/.cache/spack/bin

addons:
  apt:
    &apt_common_sources
    sources:
      - ubuntu-toolchain-r-test

jobs:
  fast_finish: true
  include:
    ###########################################################################
    # Stage: Style                                                            #
    ###########################################################################
    - &style_python
      stage: 'Style'
      language: python
      python: "2.7"
      install: pip install -U flake8
      script:
        # Test Python Files for PEP8 conformance
        - flake8 --exclude=thirdParty .
    - <<: *style_python
      python: "3.6"
    # TODO: C++ clang-format checks
    ###########################################################################
    # Stage: Static Code Analysis                                             #
    ###########################################################################
    - &static_code_python
      stage: 'Static Code Analysis'
      language: python
      python: "2.7"
      install: pip install -U pyflakes
      script:
        # Warnings, unused code, etc.
        - pyflakes .
    - <<: *static_code_python
      python: "3.6"
    ###########################################################################
    # Stage: C++ Unit Tests                                                   #
    ###########################################################################
    # Clang 5.0.0
    - &test-cpp-unit
      stage: 'C++ Unit Tests'
      language: cpp
      env:
        - USE_MPI=OFF USE_PYTHON=OFF USE_HDF5=ON USE_ADIOS1=OFF USE_ADIOS2=OFF
      compiler: clang
      addons:
        apt:
          <<: *apt_common_sources
          packages: &clang50_deps
            - environment-modules
            - gfortran-4.9
            - g++-4.9  # CMake build
      before_install: &clang50_init
         - COMPILERSPEC="%clang@5.0.0"
      script: &script-cpp-unit
        - mkdir -p $HOME/build 
        - cd $HOME/build
        - if [ ! -d samples/git-sample/ ]; then
             $TRAVIS_BUILD_DIR/.travis/download_samples.sh;
          fi
        - CXXFLAGS=$CXXFLAGS CXX=$CXX CC=$CC
          cmake
            -DCMAKE_BUILD_TYPE=Debug
            -DopenPMD_USE_MPI=$USE_MPI
            -DopenPMD_USE_HDF5=$USE_HDF5
            -DopenPMD_USE_ADIOS1=$USE_ADIOS1
            -DopenPMD_USE_ADIOS2=$USE_ADIOS2
            -DopenPMD_USE_PYTHON=$USE_PYTHON
            -DPYTHON_EXECUTABLE:FILEPATH=$(which python)
            -DCMAKE_INSTALL_PREFIX=$HOME/openPMD-test-install
            $TRAVIS_BUILD_DIR
        - make -j 2
        - CTEST_OUTPUT_ON_FAILURE=1 make test
        - make install
        # - make package
        # - dpkg -i openPMD*.deb
    - <<: *test-cpp-unit
      env:
        - USE_MPI=ON USE_PYTHON=OFF USE_HDF5=ON USE_ADIOS1=OFF USE_ADIOS2=OFF
      compiler: clang
      addons:
        apt:
          <<: *apt_common_sources
          packages:
            - *clang50_deps
            - libopenmpi-dev
            - openmpi-bin
      before_install: *clang50_init
      script: *script-cpp-unit
    # Clang 8.1.0-apple + Python 2.7.10 @ OSX
    - <<: *test-cpp-unit
      os: osx
      language: generic
      env:
        - USE_MPI=OFF USE_PYTHON=ON USE_HDF5=ON USE_ADIOS1=OFF USE_ADIOS2=OFF
      compiler: clang
      before_install:
         - COMPILERSPEC="%clang@8.1.0"
      script: *script-cpp-unit
    # GCC 4.9.4
    - <<: *test-cpp-unit
      env:
        - USE_MPI=OFF USE_PYTHON=OFF USE_HDF5=ON USE_ADIOS1=OFF USE_ADIOS2=OFF
      compiler: gcc
      addons:
        apt:
          <<: *apt_common_sources
          packages: &gcc49_deps
            - environment-modules
            - gfortran-4.9
            - gcc-4.9
            - g++-4.9
      before_install: &gcc49_init
         - CXX=g++-4.9 && CC=gcc-4.9 && COMPILERSPEC="%gcc@4.9.4"
      script: *script-cpp-unit
    - <<: *test-cpp-unit
      env:
        - USE_MPI=ON USE_PYTHON=OFF USE_HDF5=ON USE_ADIOS1=OFF USE_ADIOS2=OFF
      compiler: gcc
      addons:
        apt:
          <<: *apt_common_sources
          packages:
            - *gcc49_deps
            - libopenmpi-dev
            - openmpi-bin
      before_install: *gcc49_init
      script: *script-cpp-unit
    # GCC 7.2.0
    - <<: *test-cpp-unit
      env:
        - USE_MPI=OFF USE_PYTHON=OFF USE_HDF5=ON USE_ADIOS1=OFF USE_ADIOS2=OFF
      compiler: gcc
      addons:
        apt:
          <<: *apt_common_sources
          packages: &gcc72_deps
            - environment-modules
            - gfortran-7
            - gcc-7
            - g++-7
      before_install: &gcc72_init
         - CXX=g++-7 && CC=gcc-7 && COMPILERSPEC="%gcc@7.2.0"
      script: *script-cpp-unit
    - <<: *test-cpp-unit
      env:
        - USE_MPI=ON USE_PYTHON=OFF USE_HDF5=ON USE_ADIOS1=OFF USE_ADIOS2=OFF
      compiler: gcc
      addons:
        apt:
          <<: *apt_common_sources
          packages:
            - *gcc72_deps
            - libopenmpi-dev
            - openmpi-bin
      before_install: *gcc72_init
      script: *script-cpp-unit
    # GCC 6.3.0 + Python 2.7
    - <<: *test-cpp-unit
      language: python
      python: "2.7"
      env:
        - USE_MPI=OFF USE_PYTHON=ON USE_HDF5=ON USE_ADIOS1=OFF USE_ADIOS2=OFF
      compiler: gcc
      addons:
        apt:
          <<: *apt_common_sources
          packages: &gcc63_deps
            - environment-modules
            - gfortran-6
            - gcc-6
            - g++-6
      before_install: &gcc63_init
         - CXX=g++-6 && CC=gcc-6 && COMPILERSPEC="%gcc@6.3.0"
      script: *script-cpp-unit
    # GCC 6.3.0 + Python 3.6
    - <<: *test-cpp-unit
      language: python
      python: "3.6"
      env:
        - USE_MPI=OFF USE_PYTHON=ON USE_HDF5=ON USE_ADIOS1=OFF USE_ADIOS2=OFF
      compiler: gcc
      addons:
        apt:
          <<: *apt_common_sources
          packages:
            - *gcc63_deps
      before_install: *gcc63_init
      script: *script-cpp-unit

install:
  # spack install
  - SPACK_FOUND=$(which spack >/dev/null && { echo 0; } || { echo 1; })
  - if [ $SPACK_FOUND -ne 0 ]; then
      mkdir -p $SPACK_ROOT &&
      git clone --depth 50 https://github.com/spack/spack.git $SPACK_ROOT;
    fi
  # spack setup
  - source /etc/profile
  - cp $TRAVIS_BUILD_DIR/.travis/spack/*.yaml
       $SPACK_ROOT/etc/spack/
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      travis_wait brew install modules &&
      brew info modules &&
      ls /usr/local/Cellar/modules/4.1.1/ &&
      source /usr/local/opt/modules/init/bash &&
      export TRAVIS_PYTHON_VERSION=2.7.10;
    fi
  - source $SPACK_ROOT/share/spack/setup-env.sh
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      export MODULEPATH=$SPACK_ROOT/share/spack/modules/$(spack arch):$MODULEPATH;
    fi
  - SPACK_VAR_MPI="~mpi";
  # required dependencies - CMake 3.10.0 & Boost 1.62.0
  - if [ ! -f $HOME/.cache/cmake-3.10.0/bin/cmake ]; then
      if [ "$TRAVIS_OS_NAME" == "linux" ]; then
        wget -O cmake.sh https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.sh &&
        sh cmake.sh --skip-license --exclude-subdir --prefix=$HOME/.cache/cmake-3.10.0 &&
        rm cmake.sh;
      else
        curl -L -s -o cmake.dmg https://cmake.org/files/v3.10/cmake-3.10.0-Darwin-x86_64.dmg &&
        yes | hdiutil mount cmake.dmg &&
        sudo cp -R "/Volumes/cmake-3.10.0-Darwin-x86_64/CMake.app" /Applications &&
        rm cmake.dmg;
      fi;
    fi
  - travis_wait spack install
      cmake@3.10.0
      $COMPILERSPEC
  - spack load cmake@3.10.0 $COMPILERSPEC
  - SPACK_BOOST_VAR="~atomic~chrono~date_time~graph~iostreams~locale~math~program_options~random~regex~serialization~signals+filesystem+system+test~timer~wave"
  - travis_wait spack install
      boost@1.65.0$SPACK_BOOST_VAR
      $COMPILERSPEC
  - spack load boost@1.65.0$SPACK_BOOST_VAR $COMPILERSPEC
  # optional dependencies - MPI, HDF5, ADIOS1, ADIOS2
  - if [ $USE_MPI == "ON" ]; then
      travis_wait spack install
        openmpi@1.6.5
        $COMPILERSPEC &&
      spack load openmpi@1.6.5 $COMPILERSPEC;
      SPACK_VAR_MPI="+mpi";
    fi
  - if [ $USE_PYTHON == "ON" ]; then
      travis_wait spack install
        py-pybind11@2.2.1 ^python@$TRAVIS_PYTHON_VERSION
        $COMPILERSPEC &&
      spack load --dependencies py-pybind11@2.2.1 ^python@$TRAVIS_PYTHON_VERSION $COMPILERSPEC;
    fi
  - if [ $USE_HDF5 == "ON" ]; then
      travis_wait spack install
        hdf5
        $SPACK_VAR_MPI
        $COMPILERSPEC &&
      spack load hdf5 $SPACK_VAR_MPI $COMPILERSPEC;
    fi
  - if [ $USE_ADIOS1 == "ON" ]; then
      travis_wait spack install
        adios
        $SPACK_VAR_MPI
        $COMPILERSPEC &&
      spack load adios $SPACK_VAR_MPI $COMPILERSPEC;
    fi
  - if [ $USE_ADIOS2 == "ON" ]; then
      travis_wait spack install
        adios2
        $SPACK_VAR_MPI
        $COMPILERSPEC &&
      spack load adios2 $SPACK_VAR_MPI $COMPILERSPEC;
    fi
  - spack clean -a
